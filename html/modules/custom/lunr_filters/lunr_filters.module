<?php

/**
 * @file
 * Add filters to lunr search pages.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormState;
use Drupal\Core\Render\Element;
use Drupal\lunr\LunrSearchInterface;

/**
 * Implements hook_lunr_search_page_alter().
 */
function lunr_filters_lunr_search_page_alter(&$build, LunrSearchInterface $lunr_search) {
  // Attach exposed filters.
  $view = $lunr_search->getView();

  // Build exposed filter form.
  $view->initHandlers();
  $form_state = new FormState();
  $form_state->setFormState([
    'view' => $view,
    'display' => $view->display_handler->display,
    'exposed_form_plugin' => $view->display_handler->getPlugin('exposed_form'),
    'method' => 'get',
    'rerender' => TRUE,
    'no_redirect' => TRUE,
    'always_process' => TRUE,
    'exposed' => TRUE,
  ]);
  $form = \Drupal::formBuilder()->buildForm('Drupal\views\Form\ViewsExposedForm', $form_state);

  // Remove actions and form values.
  unset($form['actions']);
  unset($form['form_build_id']);
  unset($form['form_token']);
  unset($form['form_id']);

  // Filter out children.
  $filters = Element::children($form);

  if (!empty($filters)) {
    $filter_definitions = $view->display_handler->getOption('filters');

    $build['form']['filters'] = [
      '#type' => 'fieldset',
      '#title' => t('Filters'),
      '#weight' => 1,
    ];

    // Move search box.
    $build['form']['filters']['input'] = $build['form']['input'];
    unset($build['form']['input']);

    $facet_fields = [];
    foreach ($filters as $key) {
      $facet_fields[] = $key;
      $build['form']['filters'][$key] = $form[$key];
      $build['form']['filters'][$key]['#attributes']['data-lunr-search-field'] = $key;

      // Make sure title is set.
      $build['form']['filters'][$key]['#title'] = lunr_filters_extract_label($filter_definitions, $key);

      // Fix all option for normal selects.
      if (!isset($build['form']['filters'][$key]['#select2']) && isset($build['form']['filters'][$key]['#options'])) {
        unset($build['form']['filters'][$key]['#options']['All']);
      }
    }

    // Add summary.
    $build['summary'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'js-lunr-summary',
          'lunr-summary',
        ],
      ],
      '#weight' => 2,
    ];

    // Adjust weights.
    $build['form']['submit']['#weight'] = 3;
    $build['results']['#weight'] = 4;

    // Add labels for table output.
    $build['#attached']['drupalSettings']['lunr']['searchSettings'][$lunr_search->id()]['tableHeaders'] = $view->display_handler->getFieldLabels();

    // Use our worker.
    $build['#attached']['drupalSettings']['lunr']['workerPath'] = base_path() . drupal_get_path('module', 'lunr_filters') . '/js/search.worker.js';
    $build['#attached']['drupalSettings']['lunr']['searchSettings'][$lunr_search->id()]['facetFields'] = $facet_fields;

    // Add select2.
    $build['#attached']['library'][] = 'lunr_filters/search';
  }
}

/**
 * Implements hook_library_info_alter().
 */
function lunr_filters_library_info_alter(&$libraries, $extension) {
  if ($extension !== 'lunr') {
    return;
  }

  $new_path = '/' . drupal_get_path('module', 'lunr_filters') . '/js';
  $replacements = [
    'js/search.js' => $new_path . '/search.js',
    'js/index.form.js' => $new_path . '/index.form.js',
  ];

  $new_js = [];
  foreach ($libraries['search']['js'] as $source => $options) {
    if (isset($replacements[$source])) {
      $new_js[$replacements[$source]] = $options;
    }
    else {
      $new_js[$source] = $options;
    }
  }
  $libraries['search']['js'] = $new_js;

  $new_js = [];
  foreach ($libraries['index.form']['js'] as $source => $options) {
    if (isset($replacements[$source])) {
      $new_js[$replacements[$source]] = $options;
    }
    else {
      $new_js[$source] = $options;
    }
  }
  $libraries['index.form']['js'] = $new_js;
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function lunr_filters_form_views_exposed_form_alter(&$form, FormState $form_state) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $form_state->get('view');

  // Only react on our display.
  if ($view->display_handler->getType() !== 'lunr_filters_search_index') {
    return;
  }

  $filters = $view->getDisplay()->getOption('filters');
  foreach ($filters as $filter) {
    if (!isset($filter['exposed']) || !$filter['exposed']) {
      continue;
    }

    $identifier = $filter['expose']['identifier'];
    if (!isset($form[$identifier])) {
      continue;
    }

    $table = $filter['table'];
    $field = $filter['field'];

    $options = $form[$identifier]['#options'];

    // Fetch values in use.
    $connection = Database::getConnection();
    $query = $connection->select($table, 't');
    $query->addField('t', $field);
    $query->condition('deleted', 0);
    $query->distinct();

    $data = $query->execute();
    // Flip the result set so the array key is the tag entity id.
    $results = array_flip($data->fetchAll(\PDO::FETCH_COLUMN, 0));

    // Intersects the arrays, giving us back an "filtered" array.
    $options = array_intersect_key($options, $results);
    $form[$identifier]['#options'] = $options;
  }
}

/**
 * Get label from filter definitions.
 */
function lunr_filters_extract_label($filter_definitions, $identifier) {
  foreach ($filter_definitions as $filter_definition) {
    if (isset($filter_definition['expose']) && isset($filter_definition['expose']['identifier']) && $filter_definition['expose']['identifier'] == $identifier) {
      return $filter_definition['expose']['label'];
    }
  }

  return t('Filter');
}
